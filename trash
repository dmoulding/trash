#!/bin/bash

readonly eperm=1
readonly enoent=2
readonly einval=22
readonly enodata=61
readonly enopkg=65

readonly usage="\
Usage: trash FILE...
       trash -l
       trash [-d DEST] -r FILE...

Trashes files and/or directories (first form), lists the contents of the
trash (second form), or restores files and/or directories from the trash
(third form).

Options:

    -d DEST
          When restoring files, restore them to the destination
          directory DEST (which must exist).

    -h    Show this help information.

    -l    List the contents of the trash. No FILE should be specified
          when using this option.

    -r    Restore the files. The files will be restored to their
          original location, unless the -d option is specified in
          which case all of the files will be restored to the
          directory DEST (which must exist).

          If the files will be restored to their original locations,
          then:

            - If the original location for a file no longer exists, it
              will be recreated, if possible.

            - If the original location information for a file is not
              available (the trash metadata for the file cannot be
              found or parsed), or the original location does not
              exist and cannot be recreated, then the file will be
              restored to the current directory.
"

check_kioclient5()
{
    if "${kioclient5_checked}"; then
        return 0
    fi

    local kioclient5_=$(type -p kioclient5)

    if [[ -z "${kioclient5_}" ]]; then
        echo "kioclient5 not found" >&2
        exit "${enopkg}"
    fi

    if [[ ! -x "${kioclient5_}" ]]; then
        echo "kioclient5 not executable or execute permission not allowed" >&2
        exit "${eperm}"
    fi

    kioclient5_checked=true
}

execute_command()
{
    check_kioclient5

    if "${list}"; then
        list_trash
    elif "${restore}"; then
        restore_files
    else
        trash_files
    fi
}

list_trash()
{
    local output_=
    local status_=

    output_=$(kioclient5 --noninteractive ls trash:/ 2>&1)
    status_=${?}
    if [[ "${status_}" -ne 0 ]]; then
        echo "Failed to list trash contents: ${output_} (${status_})" >&2
        exit "${enodata}"
    fi

    awk '
        $0 == "." {
            next
        }
        {
            file=$0
            sub(/^0-/, "", file)
            print file
        }
    ' <<< "${output_}"
}

orig_path()
{
    local file_=${1}
    local orig_path_=
    local trashinfo_=${HOME}/.local/share/Trash/info/${file_}.trashinfo

    if [[ ! -f "${trashinfo_}" || ! -r "${trashinfo_}" ]]; then
        return 0
    fi

    orig_path_=$(awk -F = '$1 == "Path" { print $2; exit }' "${trashinfo_}")
    orig_path_=${orig_path_%/*}
    echo "${orig_path_}"
}

parse_arguments()
{
    files=("${@}")

    local file_=

    if "${list}"; then
        if [[ "${#files[@]}" -ne 0 ]]; then
            echo "When listing the trash, no arguments should be given" >&2
            exit "${einval}"
        fi
    else
        if [[ "${#files[@]}" -eq 0 ]]; then
            if "${restore}"; then
                echo "Please specify a file from the trash to restore" >&2
                exit "${einval}"
            else
                echo "Please specify a file to trash" >&2
                exit "${einval}"
            fi
        fi

        if "${restore}"; then
            verify_in_trash
            if [[ -n "${dest}" ]]; then
                if [[ ! -d "${dest}" ]]; then
                    echo "The specified destination, ${dest}, is not an existing directory" >&2
                    exit "${enoent}"
                fi
            fi
        else
            for file_ in "${files[@]}"; do
                if [[ ! -e "${file_}" ]]; then
                    echo "File ${file_} does not exist" >&2
                    exit "${enoent}"
                fi
            done
        fi
    fi
}

parse_command_line()
{
    parse_options "${@}"
    shift $((OPTIND - 1))
    parse_arguments "${@}"
}

parse_options()
{
    local opt_=

    while getopts "d:hlr" opt_; do
        case "${opt_}" in
            d) dest=${OPTARG};;
            h) echo "${usage}"; exit 0;;
            l) list=true;;
            r) restore=true;;
            ?) echo "${usage}" >&2; exit "${einval}";;
        esac
    done

    if "${list}" && "${restore}"; then
        echo "Please specify only one operation at a time" >&2
        exit "${einval}"
    fi
}

restore_files()
{
    local failed_=false
    local file_=
    local file_dest_=
    local orig_path_=
    local output_=
    local status_=

    for file_ in "${files[@]}"; do
        if [[ -n "${dest}" ]]; then
            file_dest_=${dest}
        else
            file_dest_=
            orig_path_=$(orig_path "${file_}")
            if [[ -n "${orig_path_}" ]]; then
                mkdir -p "${orig_path_}" &> /dev/null
                if [[ -d "${orig_path_}" ]]; then
                    file_dest_=${orig_path_}
                fi
            fi
            if [[ -z "${file_dest_}" ]]; then
                file_dest_=.
            fi
        fi

        output_=$(kioclient5 --noninteractive mv trash:/0-"${file_}" \
            "${file_dest_}" 2>&1)
        status_=${?}
        if [[ "${status_}" -ne 0 ]]; then
            echo "Restoring ${file_} to ${file_dest_} failed: ${output_} (${status_})" >&2
            failed_=true
        fi
    done

    if "${failed_}"; then
        # At least one file was not successfully restored
        exit "${enodata}"
    fi
}

trash_files()
{
    local failed_=false
    local file_=
    local output_=
    local status_=

    for file_ in "${files[@]}"; do
        output_=$(kioclient5 --noninteractive mv "${file_}" trash:/ 2>&1)
        status_=${?}
        if [[ "${status_}" -ne 0 ]]; then
            echo "Moving ${file_} to trash failed: ${output_} (${status_})" >&2
            failed_=true
        fi
    done

    if "${failed_}"; then
        # At least one file was not successfully trashed
        exit "${enodata}"
    fi
}

verify_in_trash()
{
    local file_=

    check_kioclient5

    for file_ in "${files[@]}"; do
        if ! kioclient5 --noninteractive ls trash:/0-"${file_}" &> /dev/null
        then
            echo "File ${file_} not found in the trash" >&2
            exit "${enoent}"
        fi
    done
}

dest=
files=()
kioclient5_checked=false
list=false
orig_path=
restore=false

parse_command_line "${@}"

execute_command

# Local Variables:
# sh-basic-offset: 4
# indent-tabs-mode: nil
# End:
